TIMELINE
First draft done by the end of the day on Friday.
Thurs   - Warning if answer is > 2-sig away from training labels
        - Plot: triangle.py for the N labels
        - Continuum normalization
Fri     - Documentation

new features:
- Warning if the S/N of training spectra isn't high enough
- Warning if the set size isn't big enough
- Recognize if a spectrum has properties that are not covered by the spectral model. Auto-correlation of residual spectrum (if the residual is actually dominated by noise, should get a delta function)
- Overplot the continuum pixels on the 0th order spectrum\
- Plot of the leading coefficients as a function of wavelength
- Histogram of the chi-sq of the fits, w/ a dashed line corresponding to DOF (npixels - nlabels)
- triangle.py for the N labels (Foreman-Mackey)\
- Warning if the answer is more than 2-sig away from the mean & variance of training labels
- Overplot each Cannon best-fit spectrum with the original spectrum.
- Imagine that the residual of each best-fit spectrum is a 1D list, stack them and sort by each of the labels. Then we will see whether all stars have deviations at a particular wavelength from the best-fit model irrespective of the label -- if the quadratic model is general enough, then the 2D residual should show nothing but noise. (Jo Bovy has done something similar?) -- don't forget to normalize by the sources of variance and scatter, see HW's e-mail

for me:
- scratch this idea of "merging datasets"
- write the ASPCAP implementation and make sure that the above works
- write "merge" method for the Database class
- check to make sure the Database class is working for ASPCAP
- write the implementation for all of the above with ASPCAP training set, and APOKASC test set.
- write the implementation for all of the above with APOKASC training set, and APOKAC test set.
- write the take-one-out test.
---- then the file preparation process will be set.

farther down the road:
- spectral model needs to be allowed to vary from pixel to pixel (Gaussian process)
- create non-identical subsets of the training set
- shot noise in the creation of a training set
- check the scatter at each pixel

I don't understand:
- MCM_rotate_all matrix...what is it? it's the coefficients multiplied by the inverse covariance (1/errors^2). Just has to be the right shape for matrix multiplication to work. MKN will send me the maths in the next couple of days. 
